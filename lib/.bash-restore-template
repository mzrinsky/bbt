#!/usr/bin/env bash

# BBT BRS - Better Backup Tool Bash Restore Script
# This script is generated by the Better Backup Tool (BBT),
# and is used to restore backup snapshots created by bbt.

# the resources that should be restored from the snapshot
declare -a restore_resources=(
{{!restore_resources}}
)

# resources that should be excluded when restoring
declare -a restore_exclude_resources=(
{{!restore_exclude_resources}}
)

restore_src="{{!restore_src}}"
restore_dest="{{!restore_dest}}"
restore_src_ssh_opts="{{!restore_src_ssh_opts}}"
restore_dest_ssh_opts="{{!restore_dest_ssh_opts}}"
quiet=false
max_arg_len=`getconf ARG_MAX`


while [ $# -gt 0 ]; do
  case "$1" in
    -q|--quiet)
      quiet=true
      ;;
    -h|--help)
      printf "BBT Restore Help. \n"
      printf "Available Command Arguments: \n"
      printf "\t-q --quiet : Do NOT print status to stdout\n"
      exit 0
      ;;
    *)
      printf "Unknown or invalid command line argument : $1 \n"
      printf "Arguments are in the form -s -s=value or --long --long=value\n"
      printf "Use -h or --help for a full list of arguments"
      exit 1
  esac
  shift
done

function printerr() {
  printf "%s\n" "$*" >&2
}

function pre_exec() {
  if [[ "$quiet" != true ]]; then
    set -x
  fi
  set -eo pipefail
}

function post_exec() {
  if [ "${quiet}" != true ];
    then set +x
  fi
  set +eo pipefail
}

if [[ "$quiet" != true ]]; then
  start_time=`date`
  printf "$0 run started.\nStart Time: ${start_time}\n"
fi

function join_by {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

# parse_url "ssh://user@host:9090/this/is/the.path"
# echo "Potocol:"$proto" User:"$usr" Host:"$host" Port:"$port" Path:"$path
function parse_url() {
  local url=$1

  tmp=${url#*//};user=${tmp%@*}
  tmp=${url#*@};host=${tmp%%/*};[[ ${url#*://} == *":"* ]] && host=${host%:*}
  tmp=${url#*//};path=/${tmp#*/}
  proto=${url%%:*}
  [[ ${url#*://} == *":"* ]] && tmp=${url##*:} && port=${tmp%%/*}
}

restore_resource_str=`join_by " " ${restore_resources[@]/#\//.\/}`
exclude_resource_str=`join_by " --exclude " ${restore_exclude_resources[@]/#\//.\/}`
if [[ "${exclude_resource_str}" != "" ]]; then
  exclude_resource_str="--anchored --exclude ${exclude_resource_str} "
fi
restore_str_len=${#restore_resource_str}
exclude_str_len=${#exclude_resource_str}
command_len_estimate=50
estimated_length=$(( ${restore_str_len} + ${exclude_str_len} + ${command_len_estimate}))
if [ ${estimated_length} -ge ${max_arg_len} ]; then
  # this is just to handle an edge case..
  # a future resolution for this is to write the list of resources to a file,
  # and use the various options to tar instead.. (eg tar -cf - --verbatim-files-from --files-from tmpfile.txt)
  # for now we just error out before something bad happens.
  printf "Whoops.. Sorry, you hit an edge case.\n"
  printf "The the length of the command line generated for you restore exceeds the maximum length of command line arguments.\n"
  printf "Your Command Line: ${command_len_estimate} >=  Maximum Length: ${max_arg_len}\n"
  printf "Please file a bug, and in the meantime you can try to split your restore resources into multiple scripts?\n"
  exit 1;
fi

ssh_prefix="ssh://"

function try_restore() {

  if [[ "$quiet" != true ]]; then
    echo "Trying restore src: ${restore_src}, dest: ${restore_dest}"
  fi

  # if the restore source is remote..
  if [[ "$restore_src" == "${ssh_prefix}"* ]]; then

    parse_url "$restore_src"
    restore_src_uri="ssh://${user}@${host}"
    if [[ "$port" != "" ]]; then
      restore_src_ssh_opts="-p ${port} ${restore_src_ssh_opts}"
    fi
    restore_src_path="${path}"


    # if the restore dest is also remote (remote src => remote dest)
    if [[ "$restore_dest" == "${ssh_prefix}"* ]]; then

      # restore from remote src, to remote dest
      # parse the url, so we can get the path etc.
      parse_url "$restore_dest"
      restore_dest_uri="ssh://${user}@${host}"
      if [[ "$port" != "" ]]; then
        restore_dest_ssh_opts="-p ${port} ${restore_dest_ssh_opts}"
      fi
      restore_dest_path="${path}"

      pre_exec
      ssh ${restore_src_ssh_opts}${restore_src_uri} "cat ${restore_src_path}" \
      | ssh ${restore_dest_ssh_opts}${restore_dest_uri} \
      "{{!extract_command}} | tar -C ${restore_dest_path} --overwrite -xvf - ${exclude_resource_str}${restore_resource_str}"
      post_exec

    # else the restore dest is local (remote src => local dest)
    else

      pre_exec
      # restore from remote src, to local dest
      ssh ${restore_src_ssh_opts}${restore_src_uri} "cat ${restore_src_path}" \
      | {{!extract_command}} | tar -C ${restore_dest} --overwrite -xvf - ${exclude_resource_str}${restore_resource_str}
      post_exec

    fi

  # else the restore src is local
  else

    restore_src_path=$restore_src

    # if the restore dest is remote.. (local src => remote dest)
    if [[ "$restore_dest" == "${ssh_prefix}"* ]]; then

      # restore from remote src, to remote dest
      # parse the url, so we can get the path etc.
      parse_url "$restore_dest"
      restore_dest_uri="ssh://${user}@${host}"
      if [[ "$port" != "" ]]; then
        restore_dest_ssh_opts="-p ${port} ${restore_dest_ssh_opts}"
      fi
      restore_dest_path="${path}"

      # restore from local src, to remote dest
      pre_exec
      cat ${restore_src_path} \
      | ssh ${restore_dest_ssh_opts}${restore_dest_uri} \
      "{{!extract_command}} | tar -C ${restore_dest_path} --overwrite -xvf - ${exclude_resource_str}${restore_resource_str}"
      post_exec

    # else the restore dest is local.. (local src => local dest)
    else
      # restore from local src, to local dest
      pre_exec
      cat ${restore_src} | {{!extract_command}} | tar -C ${restore_dest} --overwrite -xvf - ${exclude_resource_str}${restore_resource_str}
      post_exec
    fi

  fi
}

try_restore

if [[ "$quiet" != true ]]; then
  sys_str=`uname -a`
  finish_time=`date`
  printf "System: ${sys_str}\nFinished Run: ${finish_time}\n"
  echo "$0 run complete."
fi

exit 0;
